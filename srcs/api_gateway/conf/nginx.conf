events {
	worker_connections 1024;
}

http {
	include				/etc/nginx/mime.types;
	default_type	application/octet-stream;

	map $http_upgrade $connection_upgrade {
		default	upgrade;
		''			close;
	}

	upstream pong_frontend {
		server frontend:80;
	}

	upstream pong_ws_relay {
		server pong_relay:3333;
	}

	upstream auth_service {
		server auth:3005;
	}

	server {
		listen 80;

		location /ws {
			proxy_pass http://pong_ws_relay;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header Host $host;
			proxy_read_timeout 86400s;
		}

		location /session {
			proxy_pass http://pong_ws_relay;
		}

		location /join {
			proxy_pass http://pong_ws_relay;
		}

		location /current {
			proxy_pass http://pong_ws_relay;
		}

		# Auth routes
		location /api/auth/ {
			# Handle OPTIONS method for CORS
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain; charset=utf-8';
				add_header 'Content-Length' 0;
				return 204;
			}

			# Rewrite if the backend doesn't expect /api/auth prefix
			rewrite ^/api/auth/(.*)$ /$1 break;

			proxy_pass http://auth_service;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			# CORS headers
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

			# Redirect handling (if auth service uses redirects to localhost)
			proxy_redirect http://localhost/ http://$host/;
			proxy_redirect http://localhost:3005/ http://$host/;
		}

		location api/database {
			# Handle OPTIONS method for CORS
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain; charset=utf-8';
				add_header 'Content-Length' 0;
				return 204;
			}

			rewrite ^/database(.*) /$1 break;
			proxy_pass http://database;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			# CORS headers for auth service
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

			# Handle redirects from auth service
			proxy_redirect http://localhost/ http://$host/;
			proxy_redirect http://localhost:5000/ http://$host/;
		}

		# Everything else â†’ Frontend
		location / {
			proxy_pass http://pong_frontend;
			proxy_http_version 1.1;
			proxy_set_header Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}
}