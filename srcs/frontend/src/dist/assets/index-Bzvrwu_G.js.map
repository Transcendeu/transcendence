{"version":3,"file":"index-Bzvrwu_G.js","sources":["../../router/Router.ts","../../components/Menu.ts","../../components/PongGame.ts","../../components/NotFound.ts","../../utils/crypto.ts","../../components/Login.ts","../../components/Register.ts","../../components/Settings.ts","../../components/LocalTournament.ts","../../App.ts","../../main.ts"],"sourcesContent":["type RouteCallback = () => void | Promise<void>;\n\ninterface RouteConfig {\n    callback: RouteCallback;\n    requiresAuth?: boolean;\n}\n\nexport class Router {\n    private routes: Map<string, RouteConfig>;\n    private notFoundCallback: RouteCallback | null = null;\n\n    constructor() {\n        this.routes = new Map();\n        window.addEventListener('popstate', () => this.handleRoute());\n    }\n\n    public addRoute(path: string, callback: RouteCallback, options: { requiresAuth?: boolean } = {}): void {\n        this.routes.set(path, {\n            callback,\n            requiresAuth: options.requiresAuth\n        });\n    }\n\n    public setNotFoundHandler(callback: RouteCallback): void {\n        this.notFoundCallback = callback;\n    }\n\n    public async navigate(path: string): Promise<void> {\n        console.log('Navigating to path:', path);\n        window.history.pushState({}, '', path);\n        await this.handleRoute();\n    }\n\n    private async handleRoute(): Promise<void> {\n        const path = window.location.pathname;\n        console.log('Handling route for path:', path);\n        const route = this.routes.get(path);\n\n        try {\n            if (route) {\n                console.log('Found route:', path, 'requiresAuth:', route.requiresAuth);\n                if (route.requiresAuth && !this.isAuthenticated()) {\n                    console.log('Route requires auth, redirecting to login');\n                    await this.navigate('/login');\n                    return;\n                }\n                console.log('Executing route callback');\n                await Promise.resolve(route.callback());\n            } else if (this.notFoundCallback) {\n                console.log('No route found, using not found handler');\n                await Promise.resolve(this.notFoundCallback());\n            } else {\n                console.error(`No route found for path: ${path}`);\n            }\n        } catch (error) {\n            console.error('Error handling route:', error);\n        }\n    }\n\n    private isAuthenticated(): boolean {\n        const token = localStorage.getItem('access_token');\n        const userData = localStorage.getItem('user_data');\n        const isAuth = !!token && !!userData;\n        console.log('Checking authentication in router:', { token: !!token, userData: !!userData, isAuth });\n        return isAuth;\n    }\n} ","import { Router } from '../router/Router';\n\ninterface UserData {\n    id: number;\n    email: string;\n    username: string;\n    status: string;\n    accessToken: string;\n    refreshToken: string;\n}\n\nexport class Menu {\n    private container: HTMLElement;\n    private router: Router;\n    private userData: UserData | null = null;\n\n    constructor(container: HTMLElement, router: Router) {\n        this.container = container;\n        this.router = router;\n        this.handleGoogleCallback();\n        this.loadUserData();\n        this.render();\n    }\n\n    private loadUserData(): void {\n        console.log('Loading user data...');\n        const storedData = localStorage.getItem('user_data');\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n\n        if (storedData && accessToken && refreshToken) {\n            console.log('Found user data in localStorage:', storedData);\n            try {\n                this.userData = JSON.parse(storedData);\n                // Ensure tokens are up to date\n                if (this.userData) {\n                    this.userData.accessToken = accessToken;\n                    this.userData.refreshToken = refreshToken;\n                }\n                console.log('Loaded user data:', this.userData);\n            } catch (error) {\n                console.error('Error parsing stored user data:', error);\n                this.userData = null;\n            }\n        } else {\n            console.log('No user data found in localStorage');\n            this.userData = null;\n        }\n    }\n\n    private handleGoogleCallback(): void {\n        console.log('Handling Google callback...');\n        const urlParams = new URLSearchParams(window.location.search);\n        const data = urlParams.get('data');\n        \n        if (data) {\n            console.log('Found data in URL:', data);\n            try {\n                // Decode the base64 string, handling URL-safe base64\n                const base64Data = data.replace(/-/g, '+').replace(/_/g, '/');\n                const decodedData = JSON.parse(atob(base64Data));\n                console.log('Decoded user data:', decodedData);\n\n                if (decodedData.requiresTwoFactor) {\n                    // Show 2FA input dialog\n                    const twoFactorDialog = document.createElement('div');\n                    twoFactorDialog.className = 'two-factor-dialog';\n                    twoFactorDialog.innerHTML = `\n                        <div class=\"two-factor-content\">\n                            <h3>Two-Factor Authentication Required</h3>\n                            <p>Please enter your 2FA code to complete the login</p>\n                            <div class=\"form-group\">\n                                <input type=\"text\" id=\"twoFactorToken\" pattern=\"[0-9]{6}\" maxlength=\"6\" placeholder=\"Enter 6-digit code\">\n                                <div class=\"error-message\" id=\"twoFactorError\"></div>\n                            </div>\n                            <button id=\"verify2FA\" class=\"auth-button\">Verify</button>\n                        </div>\n                    `;\n\n                    document.body.appendChild(twoFactorDialog);\n\n                    const verifyButton = twoFactorDialog.querySelector('#verify2FA');\n                    const tokenInput = twoFactorDialog.querySelector('#twoFactorToken') as HTMLInputElement;\n                    const errorDisplay = twoFactorDialog.querySelector('#twoFactorError');\n\n                    if (verifyButton && tokenInput && errorDisplay) {\n                        verifyButton.addEventListener('click', async () => {\n                            try {\n                                const response = await fetch('/api/auth/verify-google-2fa', {\n                                    method: 'POST',\n                                    headers: {\n                                        'Content-Type': 'application/json'\n                                    },\n                                    body: JSON.stringify({\n                                        tempToken: decodedData.tempToken,\n                                        twoFactorToken: tokenInput.value\n                                    })\n                                });\n\n                                const responseData = await response.json();\n\n                                if (!response.ok) {\n                                    throw new Error(responseData.error || 'Verification failed');\n                                }\n\n                                // Store user data and tokens\n                                localStorage.setItem('user_data', JSON.stringify(responseData));\n                                localStorage.setItem('access_token', responseData.accessToken);\n                                localStorage.setItem('refresh_token', responseData.refreshToken);\n\n                                // Remove dialog and update page\n                                document.body.removeChild(twoFactorDialog);\n                                this.userData = responseData;\n                                this.render();\n                            } catch (error) {\n                                errorDisplay.textContent = error instanceof Error ? error.message : 'Verification failed';\n                            }\n                        });\n\n                        tokenInput.addEventListener('input', (e) => {\n                            const input = e.target as HTMLInputElement;\n                            input.value = input.value.replace(/[^0-9]/g, '');\n                        });\n                    }\n                } else {\n                    // Regular login flow\n                    this.userData = decodedData;\n                    localStorage.setItem('user_data', JSON.stringify(decodedData));\n                    localStorage.setItem('access_token', decodedData.accessToken);\n                    localStorage.setItem('refresh_token', decodedData.refreshToken);\n                }\n                \n                // Remove the data parameter from URL and update the page\n                window.history.replaceState({}, document.title, '/');\n                console.log('Updated URL and rendering menu...');\n                this.render();\n            } catch (error) {\n                console.error('Error parsing user data:', error);\n                // Try to get user data from localStorage as fallback\n                this.loadUserData();\n            }\n        } else {\n            console.log('No data in URL, loading from localStorage...');\n            this.loadUserData();\n        }\n    }\n\n    private isAuthenticated(): boolean {\n        const userData = localStorage.getItem('user_data');\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n\n        if (!userData || !accessToken || !refreshToken) {\n            console.log('Missing authentication data');\n            return false;\n        }\n\n        try {\n            const parsedData = JSON.parse(userData) as UserData;\n            const hasTokens = Boolean(accessToken && refreshToken);\n            console.log('Checking authentication:', { \n                hasUserData: true, \n                hasTokens,\n                userData: parsedData \n            });\n            return hasTokens;\n        } catch (error) {\n            console.error('Error checking authentication:', error);\n            return false;\n        }\n    }\n\n    public render(): void {\n        const isAuth = this.isAuthenticated();\n        console.log('Rendering menu, isAuth:', isAuth, 'userData:', this.userData);\n        \n        this.container.innerHTML = `\n            <div class=\"menu-container\">\n                <h1 class=\"menu-title\">DUCKONG</h1>\n                ${isAuth && this.userData ? `\n                    <div class=\"user-info\">\n                        <span class=\"username\">${this.userData.username}</span>\n                        <span class=\"status ${this.userData.status}\">${this.userData.status}</span>\n                    </div>\n                ` : ''}\n                <div class=\"menu-buttons\">\n                    <button class=\"menu-button\" id=\"local-game\">LOCAL GAME</button>\n                    <button class=\"menu-button\" id=\"local-tournament\">LOCAL TOURNAMENT</button>\n                    ${isAuth ? `\n                        <button class=\"menu-button\" id=\"online-game\">ONLINE GAME</button>\n                        <button class=\"menu-button\" id=\"tournament\">TOURNAMENT</button>\n                        <button class=\"menu-button\" id=\"settings\">SETTINGS</button>\n                        <button class=\"menu-button danger\" id=\"logout\">LOGOUT</button>\n                    ` : `\n                        <div class=\"menu-info\">\n                            <p class=\"info-text\">LOGIN TO ACCESS:</p>\n                            <ul class=\"feature-list\">\n                                <li>Online Matches</li>\n                                <li>Tournament Mode</li>\n                                <li>Save Game Stats</li>\n                                <li>Global Rankings</li>\n                            </ul>\n                        </div>\n                        <div class=\"auth-menu\">\n                            <button class=\"auth-button\" id=\"login\">LOGIN</button>\n                            <button class=\"auth-button\" id=\"register\">REGISTER</button>\n                            <button class=\"google-login-button\" id=\"googleLogin\">\n                                <img src=\"./assets/google-icon.svg\" alt=\"Google Icon\" class=\"google-icon\">\n                                Login with Google\n                            </button>\n                        </div>\n                    `}\n                </div>\n            </div>\n        `;\n\n        this.addEventListeners();\n    }\n\n    private addEventListeners(): void {\n        const localGameBtn = document.getElementById('local-game');\n        const localTournamentBtn = document.getElementById('local-tournament');\n        const onlineGameBtn = document.getElementById('online-game');\n        const tournamentBtn = document.getElementById('tournament');\n        const settingsBtn = document.getElementById('settings');\n        const loginBtn = document.getElementById('login');\n        const registerBtn = document.getElementById('register');\n        const logoutBtn = document.getElementById('logout');\n        const googleLoginBtn = document.getElementById('googleLogin');\n\n        if (localGameBtn) {\n            localGameBtn.addEventListener('click', () => {\n                this.router.navigate('/game/local');\n            });\n        }\n\n        if (localTournamentBtn) {\n            localTournamentBtn.addEventListener('click', () => {\n                this.router.navigate('/game/local-tournament');\n            });\n        }\n\n        if (onlineGameBtn) {\n            onlineGameBtn.addEventListener('click', () => {\n                this.router.navigate('/game/online');\n            });\n        }\n\n        if (tournamentBtn) {\n            tournamentBtn.addEventListener('click', () => {\n                this.router.navigate('/tournament');\n            });\n        }\n\n        if (settingsBtn) {\n            settingsBtn.addEventListener('click', () => {\n                this.router.navigate('/settings');\n            });\n        }\n\n        if (loginBtn) {\n            loginBtn.addEventListener('click', () => {\n                this.router.navigate('/login');\n            });\n        }\n\n        if (registerBtn) {\n            registerBtn.addEventListener('click', () => {\n                this.router.navigate('/register');\n            });\n        }\n\n        if (googleLoginBtn) {\n            googleLoginBtn.addEventListener('click', () => {\n                window.location.href = '/api/auth/google';\n            });\n        }\n\n        if (logoutBtn) {\n            logoutBtn.addEventListener('click', async () => {\n                try {\n                    const userData = localStorage.getItem('user_data');\n                    if (!userData) {\n                        console.error('No user data found for logout');\n                        return;\n                    }\n\n                    const parsedData = JSON.parse(userData) as UserData;\n                    console.log('Logging out user:', parsedData);\n                    const response = await fetch('/api/auth/logout', {\n                        method: 'POST',\n                        headers: {\n                            'Authorization': `Bearer ${parsedData.accessToken}`,\n                            'Content-Type': 'application/json'\n                        }\n                    });\n\n                    if (response.ok) {\n                        console.log('Logout successful');\n                    } else {\n                        console.error('Logout failed:', response.status);\n                    }\n                } catch (error) {\n                    console.error('Error during logout:', error);\n                } finally {\n                    localStorage.removeItem('user_data');\n                    localStorage.removeItem('access_token');\n                    localStorage.removeItem('refresh_token');\n                    this.userData = null;\n                    this.render();\n                }\n            });\n        }\n    }\n} ","export class PongGame {\n    private container: HTMLElement;\n    private canvas!: HTMLCanvasElement;\n    private context!: CanvasRenderingContext2D;\n    private onGameEnd: () => void;\n\n    // Game objects\n    private paddle1!: Paddle;\n    private paddle2!: Paddle;\n    private ball!: Ball;\n    private score!: Score;\n\n    // Game state\n    private gameLoop: number = 0;\n    private gameStarted: boolean = false;\n\n    constructor(container: HTMLElement, onGameEnd: () => void) {\n        this.container = container;\n        this.onGameEnd = onGameEnd;\n        this.render();\n        this.initializeGame();\n        this.setupEventListeners();\n    }\n\n    private render(): void {\n        this.container.innerHTML = `\n            <div class=\"game-container\">\n                <div class=\"game-header\">\n                    <h2>PONG</h2>\n                </div>\n                <canvas id=\"gameCanvas\" width=\"800\" height=\"600\"></canvas>\n                <div class=\"score-board\">\n                    <div>Player 1: <span id=\"score1\">0</span></div>\n                    <div>Player 2: <span id=\"score2\">0</span></div>\n                </div>\n                <div class=\"controls-info\">\n                    <p>Player 1: W/S | Player 2: ↑/↓ | Press SPACE to start</p>\n                </div>\n            </div>\n        `;\n\n        this.canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n        this.context = this.canvas.getContext('2d')!;\n    }\n\n    private initializeGame(): void {\n        // Initialize game objects\n        const paddleWidth = 10;\n        const paddleHeight = 100;\n        const ballSize = 10;\n\n        this.paddle1 = new Paddle(\n            30, // x\n            this.canvas.height / 2 - paddleHeight / 2, // y\n            paddleWidth,\n            paddleHeight,\n            ['w', 'W'], // Accept both lowercase and uppercase\n            ['s', 'S']  // Accept both lowercase and uppercase\n        );\n\n        this.paddle2 = new Paddle(\n            this.canvas.width - 30 - paddleWidth,\n            this.canvas.height / 2 - paddleHeight / 2,\n            paddleWidth,\n            paddleHeight,\n            ['ArrowUp'],\n            ['ArrowDown']\n        );\n\n        this.ball = new Ball(\n            this.canvas.width / 2,\n            this.canvas.height / 2,\n            ballSize\n        );\n\n        this.score = new Score();\n    }\n\n    private setupEventListeners(): void {\n        // Keyboard controls\n        window.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === ' ' && !this.gameStarted) {\n                this.startGame();\n            }\n            \n            this.paddle1.handleKeyDown(e.key);\n            this.paddle2.handleKeyDown(e.key);\n        });\n\n        window.addEventListener('keyup', (e: KeyboardEvent) => {\n            this.paddle1.handleKeyUp(e.key);\n            this.paddle2.handleKeyUp(e.key);\n        });\n    }\n\n    private startGame(): void {\n        if (this.gameStarted) return;\n        \n        this.gameStarted = true;\n        this.ball.reset();\n        this.gameLoop = window.setInterval(() => this.update(), 1000 / 60);\n    }\n\n    private update(): void {\n        // Clear canvas\n        this.context.fillStyle = '#000';\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Draw center line\n        this.context.setLineDash([5, 15]);\n        this.context.beginPath();\n        this.context.moveTo(this.canvas.width / 2, 0);\n        this.context.lineTo(this.canvas.width / 2, this.canvas.height);\n        this.context.strokeStyle = '#0ff';\n        this.context.stroke();\n\n        // Update game objects\n        this.paddle1.update(this.canvas.height);\n        this.paddle2.update(this.canvas.height);\n        this.ball.update();\n\n        // Check collisions\n        this.checkCollisions();\n\n        // Draw game objects\n        this.paddle1.draw(this.context);\n        this.paddle2.draw(this.context);\n        this.ball.draw(this.context);\n\n        // Update score display\n        const score1Element = document.getElementById('score1');\n        const score2Element = document.getElementById('score2');\n        \n        if (score1Element) score1Element.textContent = this.score.player1.toString();\n        if (score2Element) score2Element.textContent = this.score.player2.toString();\n    }\n\n    private checkCollisions(): void {\n        // Ball with top and bottom walls\n        if (this.ball.y <= 0 || this.ball.y >= this.canvas.height) {\n            this.ball.reverseY();\n        }\n\n        // Ball with paddles\n        if (this.ball.collidesWith(this.paddle1) || this.ball.collidesWith(this.paddle2)) {\n            this.ball.reverseX();\n        }\n\n        // Ball with left and right walls (scoring)\n        if (this.ball.x <= 0) {\n            this.score.player2++;\n            this.checkWinner();\n        } else if (this.ball.x >= this.canvas.width) {\n            this.score.player1++;\n            this.checkWinner();\n        }\n    }\n\n    private checkWinner(): void {\n        if (this.score.player1 >= 11 || this.score.player2 >= 11) {\n            clearInterval(this.gameLoop);\n            this.onGameEnd();\n        } else {\n            this.ball.reset();\n        }\n    }\n}\n\nclass Paddle {\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    private speed: number = 5;\n    private upKeys: string[];\n    private downKeys: string[];\n    private moving: number = 0; // -1 for up, 0 for still, 1 for down\n\n    constructor(x: number, y: number, width: number, height: number, upKeys: string[], downKeys: string[]) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.upKeys = upKeys;\n        this.downKeys = downKeys;\n    }\n\n    public handleKeyDown(key: string): void {\n        if (this.upKeys.includes(key)) this.moving = -1;\n        if (this.downKeys.includes(key)) this.moving = 1;\n    }\n\n    public handleKeyUp(key: string): void {\n        if ((this.upKeys.includes(key) && this.moving === -1) ||\n            (this.downKeys.includes(key) && this.moving === 1)) {\n            this.moving = 0;\n        }\n    }\n\n    public update(canvasHeight: number): void {\n        this.y += this.moving * this.speed;\n        this.y = Math.max(0, Math.min(canvasHeight - this.height, this.y));\n    }\n\n    public draw(context: CanvasRenderingContext2D): void {\n        context.fillStyle = '#0ff';\n        context.shadowColor = '#0ff';\n        context.shadowBlur = 10;\n        context.fillRect(this.x, this.y, this.width, this.height);\n        context.shadowBlur = 0;\n    }\n}\n\nclass Ball {\n    public x: number;\n    public y: number;\n    public size: number;\n    private speedX: number = 5;\n    private speedY: number = 5;\n    private initialX: number;\n    private initialY: number;\n\n    constructor(x: number, y: number, size: number) {\n        this.initialX = x;\n        this.initialY = y;\n        this.x = x;\n        this.y = y;\n        this.size = size;\n    }\n\n    public update(): void {\n        this.x += this.speedX;\n        this.y += this.speedY;\n    }\n\n    public draw(context: CanvasRenderingContext2D): void {\n        context.fillStyle = '#0ff';\n        context.shadowColor = '#0ff';\n        context.shadowBlur = 10;\n        context.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);\n        context.shadowBlur = 0;\n    }\n\n    public reset(): void {\n        this.x = this.initialX;\n        this.y = this.initialY;\n        this.speedX = 5 * (Math.random() > 0.5 ? 1 : -1);\n        this.speedY = 5 * (Math.random() > 0.5 ? 1 : -1);\n    }\n\n    public reverseX(): void {\n        this.speedX = -this.speedX * 1.1; // Increase speed slightly\n    }\n\n    public reverseY(): void {\n        this.speedY = -this.speedY;\n    }\n\n    public collidesWith(paddle: Paddle): boolean {\n        return this.x >= paddle.x && \n               this.x <= paddle.x + paddle.width &&\n               this.y >= paddle.y &&\n               this.y <= paddle.y + paddle.height;\n    }\n}\n\nclass Score {\n    public player1: number = 0;\n    public player2: number = 0;\n} ","import { Router } from '../router/Router';\n\nexport class NotFound {\n    constructor(private container: HTMLElement, private router: Router) {\n        this.render();\n    }\n\n    private render(): void {\n        const notFoundContainer = document.createElement('div');\n        notFoundContainer.className = 'not-found-container';\n\n        notFoundContainer.innerHTML = `\n            <div class=\"not-found-content\">\n                <h1 class=\"glitch-text\">404</h1>\n                <p class=\"error-message\">SYSTEM MALFUNCTION: PAGE NOT FOUND</p>\n                <button class=\"menu-button\" id=\"backToHome\">RETURN TO MAINFRAME</button>\n            </div>\n        `;\n\n        this.container.appendChild(notFoundContainer);\n        \n        const backButton = notFoundContainer.querySelector('#backToHome');\n        if (backButton) {\n            backButton.addEventListener('click', () => {\n                this.router.navigate('/');\n            });\n        }\n    }\n} ","export async function hashPassword(password: string): Promise<string> {\n    // Convert the password to a Uint8Array\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password);\n\n    // Hash the password using SHA-256\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n\n    // Convert the hash to a base64 string\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    \n    return hashHex;\n} ","import { Router } from '../router/Router';\nimport { hashPassword } from '../utils/crypto';\n\nexport class Login {\n    constructor(private container: HTMLElement, private router: Router) {\n        this.render();\n    }\n\n    private render(): void {\n        const loginContainer = document.createElement('div');\n        loginContainer.className = 'auth-container';\n\n        loginContainer.innerHTML = `\n            <div class=\"auth-content\">\n                <h2 class=\"auth-title\">LOGIN</h2>\n                <form id=\"loginForm\" class=\"auth-form\">\n                    <div class=\"form-group\">\n                        <label for=\"username\">USERNAME</label>\n                        <input type=\"text\" id=\"username\" name=\"username\" required>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">PASSWORD</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required>\n                    </div>\n                    <div id=\"twoFactorGroup\" class=\"form-group\" style=\"display: none;\">\n                        <label for=\"twoFactorToken\">2FA CODE</label>\n                        <input type=\"text\" id=\"twoFactorToken\" name=\"twoFactorToken\" pattern=\"[0-9]{6}\" maxlength=\"6\" placeholder=\"Enter 6-digit code\">\n                    </div>\n                    <div class=\"form-error\" id=\"loginError\"></div>\n                    <button type=\"submit\" class=\"auth-button\">ACCESS SYSTEM</button>\n                </form>\n                <div class=\"auth-links\">\n                    <button class=\"text-button\" id=\"toRegister\">NEW USER? REGISTER</button>\n                </div>\n            </div>\n        `;\n\n        this.container.appendChild(loginContainer);\n        this.setupEventListeners(loginContainer);\n    }\n\n    private setupEventListeners(container: HTMLElement): void {\n        const loginForm = container.querySelector('#loginForm');\n        const toRegister = container.querySelector('#toRegister');\n        const errorDisplay = container.querySelector('#loginError');\n        const twoFactorGroup = container.querySelector('#twoFactorGroup');\n        const twoFactorToken = container.querySelector('#twoFactorToken') as HTMLInputElement;\n\n        if (loginForm && errorDisplay) {\n            loginForm.addEventListener('submit', async (e) => {\n                e.preventDefault();\n                const formData = new FormData(e.target as HTMLFormElement);\n                const username = formData.get('username') as string;\n                const password = formData.get('password') as string;\n                const token = formData.get('twoFactorToken') as string;\n\n                try {\n                    // Hash the password before sending\n                    const hashedPassword = await hashPassword(password);\n\n                    const response = await fetch('/api/auth/login', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ username, password: hashedPassword, twoFactorToken: token }),\n                    });\n\n                    const data = await response.json();\n\n                    if (!response.ok) {\n                        if (data.requiresTwoFactor) {\n                            twoFactorGroup?.setAttribute('style', 'display: block');\n                            errorDisplay.textContent = 'Please enter your 2FA code';\n                            (errorDisplay as HTMLElement).style.display = 'block';\n                            return;\n                        }\n                        throw new Error(data.error || 'Invalid credentials');\n                    }\n\n                    // Store user data and tokens\n                    const userData = {\n                        id: data.user.id,\n                        email: data.user.email,\n                        username: data.user.username,\n                        status: 'online',\n                        accessToken: data.accessToken,\n                        refreshToken: data.refreshToken\n                    };\n                    \n                    localStorage.setItem('user_data', JSON.stringify(userData));\n                    localStorage.setItem('access_token', data.accessToken);\n                    localStorage.setItem('refresh_token', data.refreshToken);\n                    \n                    // Force a page reload to ensure proper state\n                    window.location.href = '/';\n                } catch (error) {\n                    errorDisplay.textContent = error instanceof Error ? error.message : 'Login failed';\n                    (errorDisplay as HTMLElement).style.display = 'block';\n                }\n            });\n        }\n\n        if (toRegister) {\n            toRegister.addEventListener('click', () => {\n                this.router.navigate('/register');\n            });\n        }\n\n        if (twoFactorToken) {\n            twoFactorToken.addEventListener('input', (e) => {\n                const input = e.target as HTMLInputElement;\n                input.value = input.value.replace(/[^0-9]/g, '');\n            });\n        }\n    }\n} ","import { Router } from '../router/Router';\nimport { hashPassword } from '../utils/crypto';\n\nexport class Register {\n    constructor(private container: HTMLElement, private router: Router) {\n        this.render();\n    }\n\n    private render(): void {\n        const registerContainer = document.createElement('div');\n        registerContainer.className = 'auth-container';\n\n        registerContainer.innerHTML = `\n            <div class=\"auth-content\">\n                <h2 class=\"auth-title\">REGISTER</h2>\n                <form id=\"registerForm\" class=\"auth-form\">\n                    <div class=\"form-group\">\n                        <label for=\"username\">USERNAME</label>\n                        <input type=\"text\" id=\"username\" name=\"username\" required minlength=\"3\" maxlength=\"20\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"email\">EMAIL</label>\n                        <input type=\"email\" id=\"email\" name=\"email\" required>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">PASSWORD</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"8\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"confirmPassword\">CONFIRM PASSWORD</label>\n                        <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required>\n                    </div>\n                    <div class=\"form-error\" id=\"registerError\"></div>\n                    <button type=\"submit\" class=\"auth-button\">CREATE ACCOUNT</button>\n                </form>\n                <div class=\"auth-links\">\n                    <button class=\"text-button\" id=\"toLogin\">EXISTING USER? LOGIN</button>\n                </div>\n            </div>\n        `;\n\n        this.container.appendChild(registerContainer);\n        this.setupEventListeners(registerContainer);\n    }\n\n    private setupEventListeners(container: HTMLElement): void {\n        const registerForm = container.querySelector('#registerForm');\n        const toLogin = container.querySelector('#toLogin');\n        const errorDisplay = container.querySelector('#registerError');\n\n        if (registerForm && errorDisplay) {\n            registerForm.addEventListener('submit', async (e) => {\n                e.preventDefault();\n                const formData = new FormData(e.target as HTMLFormElement);\n                const username = formData.get('username') as string;\n                const email = formData.get('email') as string;\n                const password = formData.get('password') as string;\n                const confirmPassword = formData.get('confirmPassword') as string;\n\n                if (password !== confirmPassword) {\n                    errorDisplay.textContent = 'Passwords do not match';\n                    (errorDisplay as HTMLElement).style.display = 'block';\n                    return;\n                }\n\n                try {\n                    // Hash the password before sending\n                    const hashedPassword = await hashPassword(password);\n\n                    const response = await fetch('/api/auth/register', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ username, email, password: hashedPassword }),\n                    });\n\n                    if (!response.ok) {\n                        throw new Error('Registration failed');\n                    }\n\n                    // Automatically log in after successful registration\n                    const loginResponse = await fetch('/api/auth/login', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ username, password: hashedPassword }),\n                    });\n\n                    if (!loginResponse.ok) {\n                        throw new Error('Auto-login failed');\n                    }\n\n                    const data = await loginResponse.json();\n                    \n                    // Store user data and tokens\n                    const userData = {\n                        id: data.user.id,\n                        email: data.user.email,\n                        username: data.user.username,\n                        status: 'online',\n                        accessToken: data.accessToken,\n                        refreshToken: data.refreshToken\n                    };\n                    \n                    localStorage.setItem('user_data', JSON.stringify(userData));\n                    localStorage.setItem('access_token', data.accessToken);\n                    localStorage.setItem('refresh_token', data.refreshToken);\n                    \n                    // Redirect to menu with user data\n                    const encodedData = btoa(JSON.stringify(userData))\n                        .replace(/\\+/g, '-')\n                        .replace(/\\//g, '_')\n                        .replace(/=+$/, '');\n                    \n                    window.location.href = `/?data=${encodedData}`;\n                } catch (error) {\n                    errorDisplay.textContent = error instanceof Error ? error.message : 'Registration failed';\n                    (errorDisplay as HTMLElement).style.display = 'block';\n                }\n            });\n        }\n\n        if (toLogin) {\n            toLogin.addEventListener('click', () => {\n                this.router.navigate('/login');\n            });\n        }\n    }\n} ","import { Router } from '../router/Router';\n\nexport class Settings {\n    constructor(private container: HTMLElement, private router: Router) {\n        this.render();\n    }\n\n    private render(): void {\n        const settingsContainer = document.createElement('div');\n        settingsContainer.className = 'settings-container';\n\n        settingsContainer.innerHTML = `\n            <div class=\"settings-content\">\n                <h2 class=\"settings-title\">SETTINGS</h2>\n                <div class=\"settings-section\">\n                    <h3>Two-Factor Authentication</h3>\n                    <div id=\"twoFactorStatus\"></div>\n                    <div id=\"twoFactorSetup\" style=\"display: none;\">\n                        <div class=\"qr-container\">\n                            <img id=\"qrCode\" alt=\"2FA QR Code\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"twoFactorToken\">Enter 6-digit code to verify</label>\n                            <input type=\"text\" id=\"twoFactorToken\" name=\"twoFactorToken\" pattern=\"[0-9]{6}\" maxlength=\"6\" placeholder=\"Enter 6-digit code\">\n                            <button id=\"verify2FA\" class=\"settings-button\">Verify and Enable 2FA</button>\n                        </div>\n                    </div>\n                    <button id=\"setup2FA\" class=\"settings-button\">Setup 2FA</button>\n                </div>\n                <div class=\"settings-links\">\n                    <button class=\"text-button\" id=\"backToMenu\">BACK TO MENU</button>\n                </div>\n            </div>\n        `;\n\n        this.container.appendChild(settingsContainer);\n        this.setupEventListeners(settingsContainer);\n        this.load2FAStatus();\n    }\n\n    private async load2FAStatus(): Promise<void> {\n        try {\n            const response = await fetch('/api/auth/me', {\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n                }\n            });\n\n            if (!response.ok) {\n                if (response.status === 401) {\n                    // Try to refresh the token\n                    const refreshResponse = await fetch('/api/auth/refresh', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            refreshToken: localStorage.getItem('refresh_token')\n                        })\n                    });\n\n                    if (refreshResponse.ok) {\n                        const data = await refreshResponse.json();\n                        localStorage.setItem('access_token', data.accessToken);\n                        // Retry the original request\n                        return this.load2FAStatus();\n                    } else {\n                        // If refresh fails, redirect to login\n                        this.router.navigate('/login');\n                        return;\n                    }\n                }\n                throw new Error('Failed to load user data');\n            }\n\n            const user = await response.json();\n            const statusDiv = document.querySelector('#twoFactorStatus');\n            if (statusDiv) {\n                statusDiv.textContent = user.two_factor_enabled ? '2FA is enabled' : '2FA is not enabled';\n            }\n\n            const setupButton = document.querySelector('#setup2FA');\n            if (setupButton) {\n                setupButton.textContent = user.two_factor_enabled ? 'Disable 2FA' : 'Setup 2FA';\n            }\n        } catch (error) {\n            console.error('Error loading 2FA status:', error);\n        }\n    }\n\n    private setupEventListeners(container: HTMLElement): void {\n        const setupButton = container.querySelector('#setup2FA') as HTMLButtonElement;\n        const verifyButton = container.querySelector('#verify2FA') as HTMLButtonElement;\n        const backButton = container.querySelector('#backToMenu') as HTMLButtonElement;\n        const twoFactorToken = container.querySelector('#twoFactorToken') as HTMLInputElement;\n        const twoFactorSetup = container.querySelector('#twoFactorSetup');\n\n        if (setupButton) {\n            setupButton.addEventListener('click', async () => {\n                try {\n                    const response = await fetch('/api/auth/setup-2fa', {\n                        method: 'POST',\n                        headers: {\n                            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n                        }\n                    });\n\n                    if (!response.ok) {\n                        if (response.status === 401) {\n                            // Try to refresh the token\n                            const refreshResponse = await fetch('/api/auth/refresh', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    refreshToken: localStorage.getItem('refresh_token')\n                                })\n                            });\n\n                            if (refreshResponse.ok) {\n                                const data = await refreshResponse.json();\n                                localStorage.setItem('access_token', data.accessToken);\n                                // Retry the original request\n                                setupButton.click();\n                                return;\n                            } else {\n                                // If refresh fails, redirect to login\n                                this.router.navigate('/login');\n                                return;\n                            }\n                        }\n                        throw new Error('Failed to setup 2FA');\n                    }\n\n                    const data = await response.json();\n                    const qrCode = document.querySelector('#qrCode') as HTMLImageElement;\n                    if (qrCode) {\n                        qrCode.src = data.qrCode;\n                    }\n\n                    if (twoFactorSetup) {\n                        twoFactorSetup.setAttribute('style', 'display: block');\n                    }\n                } catch (error) {\n                    console.error('Error setting up 2FA:', error);\n                }\n            });\n        }\n\n        if (verifyButton && twoFactorToken) {\n            verifyButton.addEventListener('click', async () => {\n                try {\n                    const response = await fetch('/api/auth/verify-2fa', {\n                        method: 'POST',\n                        headers: {\n                            'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ token: twoFactorToken.value })\n                    });\n\n                    if (!response.ok) {\n                        if (response.status === 401) {\n                            // Try to refresh the token\n                            const refreshResponse = await fetch('/api/auth/refresh', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    refreshToken: localStorage.getItem('refresh_token')\n                                })\n                            });\n\n                            if (refreshResponse.ok) {\n                                const data = await refreshResponse.json();\n                                localStorage.setItem('access_token', data.accessToken);\n                                // Retry the original request\n                                verifyButton.click();\n                                return;\n                            } else {\n                                // If refresh fails, redirect to login\n                                this.router.navigate('/login');\n                                return;\n                            }\n                        }\n                        throw new Error('Failed to verify 2FA');\n                    }\n\n                    await this.load2FAStatus();\n                    if (twoFactorSetup) {\n                        twoFactorSetup.setAttribute('style', 'display: none');\n                    }\n                    twoFactorToken.value = '';\n                } catch (error) {\n                    console.error('Error verifying 2FA:', error);\n                }\n            });\n        }\n\n        if (backButton) {\n            backButton.addEventListener('click', () => {\n                this.router.navigate('/');\n            });\n        }\n\n        if (twoFactorToken) {\n            twoFactorToken.addEventListener('input', (e) => {\n                const input = e.target as HTMLInputElement;\n                input.value = input.value.replace(/[^0-9]/g, '');\n            });\n        }\n    }\n} ","import { Router } from '../router/Router';\nimport { PongGame } from './PongGame';\n\ninterface Player {\n    name: string;\n    wins: number;\n    losses: number;\n}\n\ninterface Match {\n    player1: Player;\n    player2: Player;\n    winner?: Player;\n    round: number;\n}\n\nexport class LocalTournament {\n    private container: HTMLElement;\n    private router: Router;\n    private players: Player[] = [];\n    private matches: Match[] = [];\n    private currentMatch: number = 0;\n    private currentRound: number = 1;\n    private totalRounds: number = 0;\n\n    constructor(container: HTMLElement, router: Router) {\n        this.container = container;\n        this.router = router;\n        this.showPlayerSetup();\n    }\n\n    private showPlayerSetup(): void {\n        this.container.innerHTML = `\n            <div class=\"tournament-setup\">\n                <h2>LOCAL TOURNAMENT SETUP</h2>\n                <div class=\"setup-form\">\n                    <div class=\"form-group\">\n                        <label for=\"playerCount\">Number of Players (4, 8, or 16):</label>\n                        <select id=\"playerCount\" class=\"tournament-select\">\n                            <option value=\"4\">4 Players</option>\n                            <option value=\"8\">8 Players</option>\n                            <option value=\"16\">16 Players</option>\n                        </select>\n                    </div>\n                    <button id=\"startSetup\" class=\"tournament-button\">START SETUP</button>\n                </div>\n            </div>\n        `;\n\n        const startSetupBtn = document.getElementById('startSetup');\n        if (startSetupBtn) {\n            startSetupBtn.addEventListener('click', () => {\n                const playerCountSelect = document.getElementById('playerCount') as HTMLSelectElement;\n                const playerCount = parseInt(playerCountSelect.value);\n                this.showPlayerNameInputs(playerCount);\n            });\n        }\n    }\n\n    private showPlayerNameInputs(playerCount: number): void {\n        let inputs = '';\n        for (let i = 1; i <= playerCount; i++) {\n            inputs += `\n                <div class=\"form-group\">\n                    <label for=\"player${i}\">Player ${i} Nickname:</label>\n                    <input type=\"text\" id=\"player${i}\" required minlength=\"2\" maxlength=\"15\" placeholder=\"Enter nickname\">\n                </div>\n            `;\n        }\n\n        this.container.innerHTML = `\n            <div class=\"tournament-setup\">\n                <h2>ENTER PLAYER NAMES</h2>\n                <form id=\"playerNamesForm\" class=\"setup-form\">\n                    ${inputs}\n                    <button type=\"submit\" class=\"tournament-button\">START TOURNAMENT</button>\n                </form>\n            </div>\n        `;\n\n        const form = document.getElementById('playerNamesForm');\n        if (form) {\n            form.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.players = [];\n                for (let i = 1; i <= playerCount; i++) {\n                    const input = document.getElementById(`player${i}`) as HTMLInputElement;\n                    if (input.value.trim()) {\n                        this.players.push({\n                            name: input.value.trim(),\n                            wins: 0,\n                            losses: 0\n                        });\n                    }\n                }\n                if (this.players.length === playerCount) {\n                    this.startTournament();\n                }\n            });\n        }\n    }\n\n    private shufflePlayers(): void {\n        for (let i = this.players.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.players[i], this.players[j]] = [this.players[j], this.players[i]];\n        }\n    }\n\n    private startTournament(): void {\n        this.shufflePlayers();\n        this.totalRounds = Math.log2(this.players.length);\n        this.currentRound = 1;\n        this.matches = [];\n        this.currentMatch = 0;\n\n        // Create first round matches\n        for (let i = 0; i < this.players.length; i += 2) {\n            this.matches.push({\n                player1: this.players[i],\n                player2: this.players[i + 1],\n                round: 1\n            });\n        }\n\n        this.showTournamentBracket();\n    }\n\n    private showTournamentBracket(): void {\n        let bracketHTML = '<div class=\"tournament-bracket\">';\n        \n        // Generate rounds\n        for (let round = 1; round <= this.totalRounds; round++) {\n            bracketHTML += `\n                <div class=\"round\">\n                    <h3>Round ${round}</h3>\n                    <div class=\"matches\">\n            `;\n\n            // Filter matches for this round\n            const roundMatches = this.matches.filter(match => match.round === round);\n            roundMatches.forEach(match => {\n                bracketHTML += `\n                    <div class=\"match ${match === this.matches[this.currentMatch] ? 'current' : ''}\">\n                        <div class=\"player ${match.winner === match.player1 ? 'winner' : ''}\">${match.player1.name}</div>\n                        <div class=\"vs\">VS</div>\n                        <div class=\"player ${match.winner === match.player2 ? 'winner' : ''}\">${match.player2.name}</div>\n                    </div>\n                `;\n            });\n\n            bracketHTML += `\n                    </div>\n                </div>\n            `;\n        }\n\n        bracketHTML += '</div>';\n\n        this.container.innerHTML = `\n            <div class=\"tournament-view\">\n                <h2>TOURNAMENT BRACKET</h2>\n                ${bracketHTML}\n                <div class=\"tournament-controls\">\n                    <button id=\"playMatch\" class=\"tournament-button\">PLAY NEXT MATCH</button>\n                    <button id=\"exitTournament\" class=\"tournament-button danger\">EXIT TOURNAMENT</button>\n                </div>\n            </div>\n        `;\n\n        this.setupTournamentControls();\n    }\n\n    private setupTournamentControls(): void {\n        const playMatchBtn = document.getElementById('playMatch');\n        const exitTournamentBtn = document.getElementById('exitTournament');\n\n        if (playMatchBtn) {\n            playMatchBtn.addEventListener('click', () => {\n                if (this.currentMatch < this.matches.length) {\n                    this.playMatch(this.matches[this.currentMatch]);\n                }\n            });\n        }\n\n        if (exitTournamentBtn) {\n            exitTournamentBtn.addEventListener('click', () => {\n                if (confirm('Are you sure you want to exit the tournament?')) {\n                    this.router.navigate('/');\n                }\n            });\n        }\n    }\n\n    private async playMatch(match: Match): Promise<void> {\n        this.container.innerHTML = '';\n        \n        // Create a temporary container for the game\n        const gameContainer = document.createElement('div');\n        this.container.appendChild(gameContainer);\n\n        // Show match announcement\n        const announcementDiv = document.createElement('div');\n        announcementDiv.className = 'match-announcement';\n        announcementDiv.innerHTML = `\n            <h2>${match.player1.name} VS ${match.player2.name}</h2>\n            <p>Round ${match.round}</p>\n            <div class=\"countdown\">Starting in: <span id=\"countdown\">3</span></div>\n        `;\n        this.container.insertBefore(announcementDiv, gameContainer);\n\n        // Countdown\n        await new Promise<void>(resolve => {\n            let count = 3;\n            const countdownSpan = document.getElementById('countdown');\n            const interval = setInterval(() => {\n                count--;\n                if (countdownSpan) countdownSpan.textContent = count.toString();\n                if (count === 0) {\n                    clearInterval(interval);\n                    resolve();\n                }\n            }, 1000);\n        });\n\n        // Start the game\n        new PongGame(gameContainer, () => {\n            // Update match results\n            const winner = 1; // Default to player 1 for now\n            const winningPlayer = winner === 1 ? match.player1 : match.player2;\n            const losingPlayer = winner === 1 ? match.player2 : match.player1;\n            \n            match.winner = winningPlayer;\n            winningPlayer.wins++;\n            losingPlayer.losses++;\n\n            // If this completes a round, create next round matches\n            const roundMatches = this.matches.filter(m => m.round === this.currentRound);\n            if (roundMatches.every(m => m.winner)) {\n                this.currentRound++;\n                \n                // Create next round matches\n                const winners = roundMatches.map(m => m.winner!);\n                for (let i = 0; i < winners.length; i += 2) {\n                    if (winners[i + 1]) {\n                        this.matches.push({\n                            player1: winners[i],\n                            player2: winners[i + 1],\n                            round: this.currentRound\n                        });\n                    }\n                }\n            }\n\n            this.currentMatch++;\n\n            // Check if tournament is complete\n            if (this.currentMatch === this.matches.length) {\n                this.showTournamentResults();\n            } else {\n                this.showTournamentBracket();\n            }\n        });\n    }\n\n    private showTournamentResults(): void {\n        // Find the winner (player with most wins)\n        const winner = this.players.reduce((prev, current) => \n            (prev.wins > current.wins) ? prev : current\n        );\n\n        this.container.innerHTML = `\n            <div class=\"tournament-results\">\n                <h2>TOURNAMENT COMPLETE!</h2>\n                <div class=\"winner-announcement\">\n                    <h3>Winner: ${winner.name}</h3>\n                    <p>Wins: ${winner.wins} | Losses: ${winner.losses}</p>\n                </div>\n                <div class=\"player-standings\">\n                    <h3>Final Standings</h3>\n                    <div class=\"standings-list\">\n                        ${this.players\n                            .sort((a, b) => b.wins - a.wins)\n                            .map((player, index) => `\n                                <div class=\"standing-item\">\n                                    <span class=\"position\">${index + 1}</span>\n                                    <span class=\"name\">${player.name}</span>\n                                    <span class=\"record\">W: ${player.wins} | L: ${player.losses}</span>\n                                </div>\n                            `).join('')}\n                    </div>\n                </div>\n                <button id=\"returnToMenu\" class=\"tournament-button\">RETURN TO MENU</button>\n            </div>\n        `;\n\n        const returnBtn = document.getElementById('returnToMenu');\n        if (returnBtn) {\n            returnBtn.addEventListener('click', () => {\n                this.router.navigate('/');\n            });\n        }\n    }\n} ","import { Router } from './router/Router';\nimport { Menu } from './components/Menu';\nimport { PongGame } from './components/PongGame';\nimport { NotFound } from './components/NotFound';\nimport { Login } from './components/Login';\nimport { Register } from './components/Register';\nimport { Settings } from './components/Settings';\nimport { LocalTournament } from './components/LocalTournament';\n\nexport class App {\n    private container: HTMLElement;\n    private router: Router;\n\n    constructor(container: HTMLElement) {\n        this.container = container;\n        this.router = new Router();\n        this.setupRoutes();\n        this.setupNotFound();\n        this.showInitialScreen();\n    }\n\n    private setupRoutes(): void {\n        // Public routes\n        this.router.addRoute('/', () => {\n            console.log('Rendering root route');\n            this.container.innerHTML = '';\n            const menu = new Menu(this.container, this.router);\n            menu.render();\n        });\n\n        this.router.addRoute('/menu', () => {\n            console.log('Rendering menu route');\n            this.container.innerHTML = '';\n            const menu = new Menu(this.container, this.router);\n            menu.render();\n        });\n\n        this.router.addRoute('/login', () => {\n            console.log('Rendering login route');\n            this.container.innerHTML = '';\n            new Login(this.container, this.router);\n        });\n\n        this.router.addRoute('/register', () => {\n            console.log('Rendering register route');\n            this.container.innerHTML = '';\n            new Register(this.container, this.router);\n        });\n\n        // Game routes\n        this.router.addRoute('/game/local', () => {\n            console.log('Rendering local game route');\n            this.container.innerHTML = '';\n            return this.startLocalGame();\n        });\n\n        this.router.addRoute('/game/local-tournament', () => {\n            console.log('Rendering local tournament route');\n            this.container.innerHTML = '';\n            new LocalTournament(this.container, this.router);\n        });\n\n        // Protected routes\n        this.router.addRoute('/game/online', () => {\n            console.log('Rendering online game route');\n            this.container.innerHTML = '';\n            return this.startOnlineGame();\n        }, { requiresAuth: true });\n\n        this.router.addRoute('/tournament', () => {\n            console.log('Rendering tournament route');\n            this.container.innerHTML = '';\n            return this.startTournament();\n        }, { requiresAuth: true });\n\n        this.router.addRoute('/settings', () => {\n            console.log('Rendering settings route');\n            this.container.innerHTML = '';\n            new Settings(this.container, this.router);\n        }, { requiresAuth: true });\n    }\n\n    private setupNotFound(): void {\n        this.router.setNotFoundHandler(() => {\n            this.container.innerHTML = '';\n            new NotFound(this.container, this.router);\n        });\n    }\n\n    private async startLocalGame(): Promise<void> {\n        return new Promise((resolve) => {\n            new PongGame(this.container, () => {\n                this.router.navigate('/');\n                resolve();\n            });\n        });\n    }\n\n    private async startOnlineGame(): Promise<void> {\n        // TODO: Implement online game mode\n        this.container.innerHTML = `\n            <div class=\"coming-soon\">\n                <h2>Online Mode Coming Soon!</h2>\n                <p>Challenge players from around the world.</p>\n                <button class=\"menu-button\" onclick=\"window.history.back()\">Go Back</button>\n            </div>\n        `;\n        return Promise.resolve();\n    }\n\n    private async startTournament(): Promise<void> {\n        // TODO: Implement tournament mode\n        this.container.innerHTML = `\n            <div class=\"coming-soon\">\n                <h2>Tournament Mode Coming Soon!</h2>\n                <p>Compete in tournaments and climb the global rankings.</p>\n                <button class=\"menu-button\" onclick=\"window.history.back()\">Go Back</button>\n            </div>\n        `;\n        return Promise.resolve();\n    }\n\n    private showInitialScreen(): void {\n        const currentPath = window.location.pathname;\n        if (currentPath === '/') {\n            new Menu(this.container, this.router);\n        } else {\n            this.router.navigate(currentPath);\n        }\n    }\n} ","import { App } from './App';\nimport './styles/main.css';\nimport './styles/google-login.css';\nimport './styles/two-factor.css';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const rootElement = document.getElementById('root');\n    \n    if (!rootElement) {\n        console.error('Root element not found');\n        return;\n    }\n\n    new App(rootElement);\n}); "],"names":["Router","routes","notFoundCallback","constructor","this","Map","window","addEventListener","handleRoute","addRoute","path","callback","options","set","requiresAuth","setNotFoundHandler","navigate","console","log","history","pushState","location","pathname","route","get","isAuthenticated","Promise","resolve","error","token","localStorage","getItem","userData","isAuth","Menu","container","router","handleGoogleCallback","loadUserData","render","storedData","accessToken","refreshToken","JSON","parse","data","URLSearchParams","search","base64Data","replace","decodedData","atob","requiresTwoFactor","twoFactorDialog","document","createElement","className","innerHTML","body","appendChild","verifyButton","querySelector","tokenInput","errorDisplay","async","response","fetch","method","headers","stringify","tempToken","twoFactorToken","value","responseData","json","ok","Error","setItem","removeChild","textContent","message","e","input","target","replaceState","title","parsedData","hasTokens","Boolean","hasUserData","username","status","addEventListeners","localGameBtn","getElementById","localTournamentBtn","onlineGameBtn","tournamentBtn","settingsBtn","loginBtn","registerBtn","logoutBtn","googleLoginBtn","href","Authorization","removeItem","PongGame","canvas","context","onGameEnd","paddle1","paddle2","ball","score","gameLoop","gameStarted","initializeGame","setupEventListeners","getContext","paddleHeight","Paddle","height","width","Ball","Score","key","startGame","handleKeyDown","handleKeyUp","reset","setInterval","update","fillStyle","fillRect","setLineDash","beginPath","moveTo","lineTo","strokeStyle","stroke","checkCollisions","draw","score1Element","score2Element","player1","toString","player2","y","reverseY","collidesWith","reverseX","x","checkWinner","clearInterval","speed","upKeys","downKeys","moving","includes","canvasHeight","Math","max","min","shadowColor","shadowBlur","size","speedX","speedY","initialX","initialY","random","paddle","NotFound","notFoundContainer","backButton","hashPassword","password","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","b","padStart","join","Login","loginContainer","loginForm","toRegister","twoFactorGroup","preventDefault","formData","FormData","hashedPassword","setAttribute","style","display","id","user","email","Register","registerContainer","registerForm","toLogin","loginResponse","encodedData","btoa","Settings","settingsContainer","load2FAStatus","refreshResponse","statusDiv","two_factor_enabled","setupButton","twoFactorSetup","click","qrCode","src","LocalTournament","players","matches","currentMatch","currentRound","totalRounds","showPlayerSetup","startSetupBtn","playerCountSelect","playerCount","parseInt","showPlayerNameInputs","inputs","i","form","trim","push","name","wins","losses","length","startTournament","shufflePlayers","j","floor","log2","round","showTournamentBracket","bracketHTML","filter","match","forEach","winner","setupTournamentControls","playMatchBtn","exitTournamentBtn","playMatch","confirm","gameContainer","announcementDiv","insertBefore","count","countdownSpan","interval","winningPlayer","losingPlayer","roundMatches","m","every","winners","showTournamentResults","reduce","prev","current","sort","a","player","index","returnBtn","App","setupRoutes","setupNotFound","showInitialScreen","startLocalGame","startOnlineGame","currentPath","rootElement"],"mappings":"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"}