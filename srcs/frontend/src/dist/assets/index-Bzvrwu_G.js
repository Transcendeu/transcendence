!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const n of t)if("childList"===n.type)for(const t of n.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();class t{routes;notFoundCallback=null;constructor(){this.routes=new Map,window.addEventListener("popstate",(()=>this.handleRoute()))}addRoute(t,e,n={}){this.routes.set(t,{callback:e,requiresAuth:n.requiresAuth})}setNotFoundHandler(t){this.notFoundCallback=t}async navigate(t){console.log("Navigating to path:",t),window.history.pushState({},"",t),await this.handleRoute()}async handleRoute(){const t=window.location.pathname;console.log("Handling route for path:",t);const e=this.routes.get(t);try{if(e){if(console.log("Found route:",t,"requiresAuth:",e.requiresAuth),e.requiresAuth&&!this.isAuthenticated())return console.log("Route requires auth, redirecting to login"),void(await this.navigate("/login"));console.log("Executing route callback"),await Promise.resolve(e.callback())}else this.notFoundCallback?(console.log("No route found, using not found handler"),await Promise.resolve(this.notFoundCallback())):console.error(`No route found for path: ${t}`)}catch(n){console.error("Error handling route:",n)}}isAuthenticated(){const t=localStorage.getItem("access_token"),e=localStorage.getItem("user_data"),n=!!t&&!!e;return console.log("Checking authentication in router:",{token:!!t,userData:!!e,isAuth:n}),n}}class e{container;router;userData=null;constructor(t,e){this.container=t,this.router=e,this.handleGoogleCallback(),this.loadUserData(),this.render()}loadUserData(){console.log("Loading user data...");const t=localStorage.getItem("user_data"),e=localStorage.getItem("access_token"),n=localStorage.getItem("refresh_token");if(t&&e&&n){console.log("Found user data in localStorage:",t);try{this.userData=JSON.parse(t),this.userData&&(this.userData.accessToken=e,this.userData.refreshToken=n),console.log("Loaded user data:",this.userData)}catch(o){console.error("Error parsing stored user data:",o),this.userData=null}}else console.log("No user data found in localStorage"),this.userData=null}handleGoogleCallback(){console.log("Handling Google callback...");const t=new URLSearchParams(window.location.search).get("data");if(t){console.log("Found data in URL:",t);try{const e=t.replace(/-/g,"+").replace(/_/g,"/"),n=JSON.parse(atob(e));if(console.log("Decoded user data:",n),n.requiresTwoFactor){const t=document.createElement("div");t.className="two-factor-dialog",t.innerHTML='\n                        <div class="two-factor-content">\n                            <h3>Two-Factor Authentication Required</h3>\n                            <p>Please enter your 2FA code to complete the login</p>\n                            <div class="form-group">\n                                <input type="text" id="twoFactorToken" pattern="[0-9]{6}" maxlength="6" placeholder="Enter 6-digit code">\n                                <div class="error-message" id="twoFactorError"></div>\n                            </div>\n                            <button id="verify2FA" class="auth-button">Verify</button>\n                        </div>\n                    ',document.body.appendChild(t);const e=t.querySelector("#verify2FA"),o=t.querySelector("#twoFactorToken"),s=t.querySelector("#twoFactorError");e&&o&&s&&(e.addEventListener("click",(async()=>{try{const e=await fetch("/api/auth/verify-google-2fa",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({tempToken:n.tempToken,twoFactorToken:o.value})}),s=await e.json();if(!e.ok)throw new Error(s.error||"Verification failed");localStorage.setItem("user_data",JSON.stringify(s)),localStorage.setItem("access_token",s.accessToken),localStorage.setItem("refresh_token",s.refreshToken),document.body.removeChild(t),this.userData=s,this.render()}catch(e){s.textContent=e instanceof Error?e.message:"Verification failed"}})),o.addEventListener("input",(t=>{const e=t.target;e.value=e.value.replace(/[^0-9]/g,"")})))}else this.userData=n,localStorage.setItem("user_data",JSON.stringify(n)),localStorage.setItem("access_token",n.accessToken),localStorage.setItem("refresh_token",n.refreshToken);window.history.replaceState({},document.title,"/"),console.log("Updated URL and rendering menu..."),this.render()}catch(e){console.error("Error parsing user data:",e),this.loadUserData()}}else console.log("No data in URL, loading from localStorage..."),this.loadUserData()}isAuthenticated(){const t=localStorage.getItem("user_data"),e=localStorage.getItem("access_token"),n=localStorage.getItem("refresh_token");if(!t||!e||!n)return console.log("Missing authentication data"),!1;try{const o=JSON.parse(t),s=Boolean(e&&n);return console.log("Checking authentication:",{hasUserData:!0,hasTokens:s,userData:o}),s}catch(o){return console.error("Error checking authentication:",o),!1}}render(){const t=this.isAuthenticated();console.log("Rendering menu, isAuth:",t,"userData:",this.userData),this.container.innerHTML=`\n            <div class="menu-container">\n                <h1 class="menu-title">DUCKONG</h1>\n                ${t&&this.userData?`\n                    <div class="user-info">\n                        <span class="username">${this.userData.username}</span>\n                        <span class="status ${this.userData.status}">${this.userData.status}</span>\n                    </div>\n                `:""}\n                <div class="menu-buttons">\n                    <button class="menu-button" id="local-game">LOCAL GAME</button>\n                    <button class="menu-button" id="local-tournament">LOCAL TOURNAMENT</button>\n                    ${t?'\n                        <button class="menu-button" id="online-game">ONLINE GAME</button>\n                        <button class="menu-button" id="tournament">TOURNAMENT</button>\n                        <button class="menu-button" id="settings">SETTINGS</button>\n                        <button class="menu-button danger" id="logout">LOGOUT</button>\n                    ':'\n                        <div class="menu-info">\n                            <p class="info-text">LOGIN TO ACCESS:</p>\n                            <ul class="feature-list">\n                                <li>Online Matches</li>\n                                <li>Tournament Mode</li>\n                                <li>Save Game Stats</li>\n                                <li>Global Rankings</li>\n                            </ul>\n                        </div>\n                        <div class="auth-menu">\n                            <button class="auth-button" id="login">LOGIN</button>\n                            <button class="auth-button" id="register">REGISTER</button>\n                            <button class="google-login-button" id="googleLogin">\n                                <img src="./assets/google-icon.svg" alt="Google Icon" class="google-icon">\n                                Login with Google\n                            </button>\n                        </div>\n                    '}\n                </div>\n            </div>\n        `,this.addEventListeners()}addEventListeners(){const t=document.getElementById("local-game"),e=document.getElementById("local-tournament"),n=document.getElementById("online-game"),o=document.getElementById("tournament"),s=document.getElementById("settings"),a=document.getElementById("login"),r=document.getElementById("register"),i=document.getElementById("logout"),l=document.getElementById("googleLogin");t&&t.addEventListener("click",(()=>{this.router.navigate("/game/local")})),e&&e.addEventListener("click",(()=>{this.router.navigate("/game/local-tournament")})),n&&n.addEventListener("click",(()=>{this.router.navigate("/game/online")})),o&&o.addEventListener("click",(()=>{this.router.navigate("/tournament")})),s&&s.addEventListener("click",(()=>{this.router.navigate("/settings")})),a&&a.addEventListener("click",(()=>{this.router.navigate("/login")})),r&&r.addEventListener("click",(()=>{this.router.navigate("/register")})),l&&l.addEventListener("click",(()=>{window.location.href="/api/auth/google"})),i&&i.addEventListener("click",(async()=>{try{const t=localStorage.getItem("user_data");if(!t)return void console.error("No user data found for logout");const e=JSON.parse(t);console.log("Logging out user:",e);const n=await fetch("/api/auth/logout",{method:"POST",headers:{Authorization:`Bearer ${e.accessToken}`,"Content-Type":"application/json"}});n.ok?console.log("Logout successful"):console.error("Logout failed:",n.status)}catch(t){console.error("Error during logout:",t)}finally{localStorage.removeItem("user_data"),localStorage.removeItem("access_token"),localStorage.removeItem("refresh_token"),this.userData=null,this.render()}}))}}class n{container;canvas;context;onGameEnd;paddle1;paddle2;ball;score;gameLoop=0;gameStarted=!1;constructor(t,e){this.container=t,this.onGameEnd=e,this.render(),this.initializeGame(),this.setupEventListeners()}render(){this.container.innerHTML='\n            <div class="game-container">\n                <div class="game-header">\n                    <h2>PONG</h2>\n                </div>\n                <canvas id="gameCanvas" width="800" height="600"></canvas>\n                <div class="score-board">\n                    <div>Player 1: <span id="score1">0</span></div>\n                    <div>Player 2: <span id="score2">0</span></div>\n                </div>\n                <div class="controls-info">\n                    <p>Player 1: W/S | Player 2: ↑/↓ | Press SPACE to start</p>\n                </div>\n            </div>\n        ',this.canvas=document.getElementById("gameCanvas"),this.context=this.canvas.getContext("2d")}initializeGame(){const t=100;this.paddle1=new o(30,this.canvas.height/2-50,10,t,["w","W"],["s","S"]),this.paddle2=new o(this.canvas.width-30-10,this.canvas.height/2-50,10,t,["ArrowUp"],["ArrowDown"]),this.ball=new s(this.canvas.width/2,this.canvas.height/2,10),this.score=new a}setupEventListeners(){window.addEventListener("keydown",(t=>{" "!==t.key||this.gameStarted||this.startGame(),this.paddle1.handleKeyDown(t.key),this.paddle2.handleKeyDown(t.key)})),window.addEventListener("keyup",(t=>{this.paddle1.handleKeyUp(t.key),this.paddle2.handleKeyUp(t.key)}))}startGame(){this.gameStarted||(this.gameStarted=!0,this.ball.reset(),this.gameLoop=window.setInterval((()=>this.update()),1e3/60))}update(){this.context.fillStyle="#000",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.setLineDash([5,15]),this.context.beginPath(),this.context.moveTo(this.canvas.width/2,0),this.context.lineTo(this.canvas.width/2,this.canvas.height),this.context.strokeStyle="#0ff",this.context.stroke(),this.paddle1.update(this.canvas.height),this.paddle2.update(this.canvas.height),this.ball.update(),this.checkCollisions(),this.paddle1.draw(this.context),this.paddle2.draw(this.context),this.ball.draw(this.context);const t=document.getElementById("score1"),e=document.getElementById("score2");t&&(t.textContent=this.score.player1.toString()),e&&(e.textContent=this.score.player2.toString())}checkCollisions(){(this.ball.y<=0||this.ball.y>=this.canvas.height)&&this.ball.reverseY(),(this.ball.collidesWith(this.paddle1)||this.ball.collidesWith(this.paddle2))&&this.ball.reverseX(),this.ball.x<=0?(this.score.player2++,this.checkWinner()):this.ball.x>=this.canvas.width&&(this.score.player1++,this.checkWinner())}checkWinner(){this.score.player1>=11||this.score.player2>=11?(clearInterval(this.gameLoop),this.onGameEnd()):this.ball.reset()}}class o{x;y;width;height;speed=5;upKeys;downKeys;moving=0;constructor(t,e,n,o,s,a){this.x=t,this.y=e,this.width=n,this.height=o,this.upKeys=s,this.downKeys=a}handleKeyDown(t){this.upKeys.includes(t)&&(this.moving=-1),this.downKeys.includes(t)&&(this.moving=1)}handleKeyUp(t){(this.upKeys.includes(t)&&-1===this.moving||this.downKeys.includes(t)&&1===this.moving)&&(this.moving=0)}update(t){this.y+=this.moving*this.speed,this.y=Math.max(0,Math.min(t-this.height,this.y))}draw(t){t.fillStyle="#0ff",t.shadowColor="#0ff",t.shadowBlur=10,t.fillRect(this.x,this.y,this.width,this.height),t.shadowBlur=0}}class s{x;y;size;speedX=5;speedY=5;initialX;initialY;constructor(t,e,n){this.initialX=t,this.initialY=e,this.x=t,this.y=e,this.size=n}update(){this.x+=this.speedX,this.y+=this.speedY}draw(t){t.fillStyle="#0ff",t.shadowColor="#0ff",t.shadowBlur=10,t.fillRect(this.x-this.size/2,this.y-this.size/2,this.size,this.size),t.shadowBlur=0}reset(){this.x=this.initialX,this.y=this.initialY,this.speedX=5*(Math.random()>.5?1:-1),this.speedY=5*(Math.random()>.5?1:-1)}reverseX(){this.speedX=1.1*-this.speedX}reverseY(){this.speedY=-this.speedY}collidesWith(t){return this.x>=t.x&&this.x<=t.x+t.width&&this.y>=t.y&&this.y<=t.y+t.height}}class a{player1=0;player2=0}class r{constructor(t,e){this.container=t,this.router=e,this.render()}render(){const t=document.createElement("div");t.className="not-found-container",t.innerHTML='\n            <div class="not-found-content">\n                <h1 class="glitch-text">404</h1>\n                <p class="error-message">SYSTEM MALFUNCTION: PAGE NOT FOUND</p>\n                <button class="menu-button" id="backToHome">RETURN TO MAINFRAME</button>\n            </div>\n        ',this.container.appendChild(t);const e=t.querySelector("#backToHome");e&&e.addEventListener("click",(()=>{this.router.navigate("/")}))}}async function i(t){const e=(new TextEncoder).encode(t),n=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(n)).map((t=>t.toString(16).padStart(2,"0"))).join("")}class l{constructor(t,e){this.container=t,this.router=e,this.render()}render(){const t=document.createElement("div");t.className="auth-container",t.innerHTML='\n            <div class="auth-content">\n                <h2 class="auth-title">LOGIN</h2>\n                <form id="loginForm" class="auth-form">\n                    <div class="form-group">\n                        <label for="username">USERNAME</label>\n                        <input type="text" id="username" name="username" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="password">PASSWORD</label>\n                        <input type="password" id="password" name="password" required>\n                    </div>\n                    <div id="twoFactorGroup" class="form-group" style="display: none;">\n                        <label for="twoFactorToken">2FA CODE</label>\n                        <input type="text" id="twoFactorToken" name="twoFactorToken" pattern="[0-9]{6}" maxlength="6" placeholder="Enter 6-digit code">\n                    </div>\n                    <div class="form-error" id="loginError"></div>\n                    <button type="submit" class="auth-button">ACCESS SYSTEM</button>\n                </form>\n                <div class="auth-links">\n                    <button class="text-button" id="toRegister">NEW USER? REGISTER</button>\n                </div>\n            </div>\n        ',this.container.appendChild(t),this.setupEventListeners(t)}setupEventListeners(t){const e=t.querySelector("#loginForm"),n=t.querySelector("#toRegister"),o=t.querySelector("#loginError"),s=t.querySelector("#twoFactorGroup"),a=t.querySelector("#twoFactorToken");e&&o&&e.addEventListener("submit",(async t=>{t.preventDefault();const e=new FormData(t.target),n=e.get("username"),a=e.get("password"),r=e.get("twoFactorToken");try{const t=await i(a),e=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,password:t,twoFactorToken:r})}),l=await e.json();if(!e.ok){if(l.requiresTwoFactor)return s?.setAttribute("style","display: block"),o.textContent="Please enter your 2FA code",void(o.style.display="block");throw new Error(l.error||"Invalid credentials")}const c={id:l.user.id,email:l.user.email,username:l.user.username,status:"online",accessToken:l.accessToken,refreshToken:l.refreshToken};localStorage.setItem("user_data",JSON.stringify(c)),localStorage.setItem("access_token",l.accessToken),localStorage.setItem("refresh_token",l.refreshToken),window.location.href="/"}catch(l){o.textContent=l instanceof Error?l.message:"Login failed",o.style.display="block"}})),n&&n.addEventListener("click",(()=>{this.router.navigate("/register")})),a&&a.addEventListener("input",(t=>{const e=t.target;e.value=e.value.replace(/[^0-9]/g,"")}))}}class c{constructor(t,e){this.container=t,this.router=e,this.render()}render(){const t=document.createElement("div");t.className="auth-container",t.innerHTML='\n            <div class="auth-content">\n                <h2 class="auth-title">REGISTER</h2>\n                <form id="registerForm" class="auth-form">\n                    <div class="form-group">\n                        <label for="username">USERNAME</label>\n                        <input type="text" id="username" name="username" required minlength="3" maxlength="20">\n                    </div>\n                    <div class="form-group">\n                        <label for="email">EMAIL</label>\n                        <input type="email" id="email" name="email" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="password">PASSWORD</label>\n                        <input type="password" id="password" name="password" required minlength="8">\n                    </div>\n                    <div class="form-group">\n                        <label for="confirmPassword">CONFIRM PASSWORD</label>\n                        <input type="password" id="confirmPassword" name="confirmPassword" required>\n                    </div>\n                    <div class="form-error" id="registerError"></div>\n                    <button type="submit" class="auth-button">CREATE ACCOUNT</button>\n                </form>\n                <div class="auth-links">\n                    <button class="text-button" id="toLogin">EXISTING USER? LOGIN</button>\n                </div>\n            </div>\n        ',this.container.appendChild(t),this.setupEventListeners(t)}setupEventListeners(t){const e=t.querySelector("#registerForm"),n=t.querySelector("#toLogin"),o=t.querySelector("#registerError");e&&o&&e.addEventListener("submit",(async t=>{t.preventDefault();const e=new FormData(t.target),n=e.get("username"),s=e.get("email"),a=e.get("password");if(a!==e.get("confirmPassword"))return o.textContent="Passwords do not match",void(o.style.display="block");try{const t=await i(a);if(!(await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,email:s,password:t})})).ok)throw new Error("Registration failed");const e=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,password:t})});if(!e.ok)throw new Error("Auto-login failed");const o=await e.json(),r={id:o.user.id,email:o.user.email,username:o.user.username,status:"online",accessToken:o.accessToken,refreshToken:o.refreshToken};localStorage.setItem("user_data",JSON.stringify(r)),localStorage.setItem("access_token",o.accessToken),localStorage.setItem("refresh_token",o.refreshToken);const l=btoa(JSON.stringify(r)).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"");window.location.href=`/?data=${l}`}catch(r){o.textContent=r instanceof Error?r.message:"Registration failed",o.style.display="block"}})),n&&n.addEventListener("click",(()=>{this.router.navigate("/login")}))}}class d{constructor(t,e){this.container=t,this.router=e,this.render()}render(){const t=document.createElement("div");t.className="settings-container",t.innerHTML='\n            <div class="settings-content">\n                <h2 class="settings-title">SETTINGS</h2>\n                <div class="settings-section">\n                    <h3>Two-Factor Authentication</h3>\n                    <div id="twoFactorStatus"></div>\n                    <div id="twoFactorSetup" style="display: none;">\n                        <div class="qr-container">\n                            <img id="qrCode" alt="2FA QR Code">\n                        </div>\n                        <div class="form-group">\n                            <label for="twoFactorToken">Enter 6-digit code to verify</label>\n                            <input type="text" id="twoFactorToken" name="twoFactorToken" pattern="[0-9]{6}" maxlength="6" placeholder="Enter 6-digit code">\n                            <button id="verify2FA" class="settings-button">Verify and Enable 2FA</button>\n                        </div>\n                    </div>\n                    <button id="setup2FA" class="settings-button">Setup 2FA</button>\n                </div>\n                <div class="settings-links">\n                    <button class="text-button" id="backToMenu">BACK TO MENU</button>\n                </div>\n            </div>\n        ',this.container.appendChild(t),this.setupEventListeners(t),this.load2FAStatus()}async load2FAStatus(){try{const t=await fetch("/api/auth/me",{headers:{Authorization:`Bearer ${localStorage.getItem("access_token")}`}});if(!t.ok){if(401===t.status){const t=await fetch("/api/auth/refresh",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:localStorage.getItem("refresh_token")})});if(t.ok){const e=await t.json();return localStorage.setItem("access_token",e.accessToken),this.load2FAStatus()}return void this.router.navigate("/login")}throw new Error("Failed to load user data")}const e=await t.json(),n=document.querySelector("#twoFactorStatus");n&&(n.textContent=e.two_factor_enabled?"2FA is enabled":"2FA is not enabled");const o=document.querySelector("#setup2FA");o&&(o.textContent=e.two_factor_enabled?"Disable 2FA":"Setup 2FA")}catch(t){console.error("Error loading 2FA status:",t)}}setupEventListeners(t){const e=t.querySelector("#setup2FA"),n=t.querySelector("#verify2FA"),o=t.querySelector("#backToMenu"),s=t.querySelector("#twoFactorToken"),a=t.querySelector("#twoFactorSetup");e&&e.addEventListener("click",(async()=>{try{const t=await fetch("/api/auth/setup-2fa",{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("access_token")}`}});if(!t.ok){if(401===t.status){const t=await fetch("/api/auth/refresh",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:localStorage.getItem("refresh_token")})});if(t.ok){const n=await t.json();return localStorage.setItem("access_token",n.accessToken),void e.click()}return void this.router.navigate("/login")}throw new Error("Failed to setup 2FA")}const n=await t.json(),o=document.querySelector("#qrCode");o&&(o.src=n.qrCode),a&&a.setAttribute("style","display: block")}catch(t){console.error("Error setting up 2FA:",t)}})),n&&s&&n.addEventListener("click",(async()=>{try{const t=await fetch("/api/auth/verify-2fa",{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("access_token")}`,"Content-Type":"application/json"},body:JSON.stringify({token:s.value})});if(!t.ok){if(401===t.status){const t=await fetch("/api/auth/refresh",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:localStorage.getItem("refresh_token")})});if(t.ok){const e=await t.json();return localStorage.setItem("access_token",e.accessToken),void n.click()}return void this.router.navigate("/login")}throw new Error("Failed to verify 2FA")}await this.load2FAStatus(),a&&a.setAttribute("style","display: none"),s.value=""}catch(t){console.error("Error verifying 2FA:",t)}})),o&&o.addEventListener("click",(()=>{this.router.navigate("/")})),s&&s.addEventListener("input",(t=>{const e=t.target;e.value=e.value.replace(/[^0-9]/g,"")}))}}class u{container;router;players=[];matches=[];currentMatch=0;currentRound=1;totalRounds=0;constructor(t,e){this.container=t,this.router=e,this.showPlayerSetup()}showPlayerSetup(){this.container.innerHTML='\n            <div class="tournament-setup">\n                <h2>LOCAL TOURNAMENT SETUP</h2>\n                <div class="setup-form">\n                    <div class="form-group">\n                        <label for="playerCount">Number of Players (4, 8, or 16):</label>\n                        <select id="playerCount" class="tournament-select">\n                            <option value="4">4 Players</option>\n                            <option value="8">8 Players</option>\n                            <option value="16">16 Players</option>\n                        </select>\n                    </div>\n                    <button id="startSetup" class="tournament-button">START SETUP</button>\n                </div>\n            </div>\n        ';const t=document.getElementById("startSetup");t&&t.addEventListener("click",(()=>{const t=document.getElementById("playerCount"),e=parseInt(t.value);this.showPlayerNameInputs(e)}))}showPlayerNameInputs(t){let e="";for(let o=1;o<=t;o++)e+=`\n                <div class="form-group">\n                    <label for="player${o}">Player ${o} Nickname:</label>\n                    <input type="text" id="player${o}" required minlength="2" maxlength="15" placeholder="Enter nickname">\n                </div>\n            `;this.container.innerHTML=`\n            <div class="tournament-setup">\n                <h2>ENTER PLAYER NAMES</h2>\n                <form id="playerNamesForm" class="setup-form">\n                    ${e}\n                    <button type="submit" class="tournament-button">START TOURNAMENT</button>\n                </form>\n            </div>\n        `;const n=document.getElementById("playerNamesForm");n&&n.addEventListener("submit",(e=>{e.preventDefault(),this.players=[];for(let n=1;n<=t;n++){const t=document.getElementById(`player${n}`);t.value.trim()&&this.players.push({name:t.value.trim(),wins:0,losses:0})}this.players.length===t&&this.startTournament()}))}shufflePlayers(){for(let t=this.players.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1));[this.players[t],this.players[e]]=[this.players[e],this.players[t]]}}startTournament(){this.shufflePlayers(),this.totalRounds=Math.log2(this.players.length),this.currentRound=1,this.matches=[],this.currentMatch=0;for(let t=0;t<this.players.length;t+=2)this.matches.push({player1:this.players[t],player2:this.players[t+1],round:1});this.showTournamentBracket()}showTournamentBracket(){let t='<div class="tournament-bracket">';for(let e=1;e<=this.totalRounds;e++){t+=`\n                <div class="round">\n                    <h3>Round ${e}</h3>\n                    <div class="matches">\n            `;this.matches.filter((t=>t.round===e)).forEach((e=>{t+=`\n                    <div class="match ${e===this.matches[this.currentMatch]?"current":""}">\n                        <div class="player ${e.winner===e.player1?"winner":""}">${e.player1.name}</div>\n                        <div class="vs">VS</div>\n                        <div class="player ${e.winner===e.player2?"winner":""}">${e.player2.name}</div>\n                    </div>\n                `})),t+="\n                    </div>\n                </div>\n            "}t+="</div>",this.container.innerHTML=`\n            <div class="tournament-view">\n                <h2>TOURNAMENT BRACKET</h2>\n                ${t}\n                <div class="tournament-controls">\n                    <button id="playMatch" class="tournament-button">PLAY NEXT MATCH</button>\n                    <button id="exitTournament" class="tournament-button danger">EXIT TOURNAMENT</button>\n                </div>\n            </div>\n        `,this.setupTournamentControls()}setupTournamentControls(){const t=document.getElementById("playMatch"),e=document.getElementById("exitTournament");t&&t.addEventListener("click",(()=>{this.currentMatch<this.matches.length&&this.playMatch(this.matches[this.currentMatch])})),e&&e.addEventListener("click",(()=>{confirm("Are you sure you want to exit the tournament?")&&this.router.navigate("/")}))}async playMatch(t){this.container.innerHTML="";const e=document.createElement("div");this.container.appendChild(e);const o=document.createElement("div");o.className="match-announcement",o.innerHTML=`\n            <h2>${t.player1.name} VS ${t.player2.name}</h2>\n            <p>Round ${t.round}</p>\n            <div class="countdown">Starting in: <span id="countdown">3</span></div>\n        `,this.container.insertBefore(o,e),await new Promise((t=>{let e=3;const n=document.getElementById("countdown"),o=setInterval((()=>{e--,n&&(n.textContent=e.toString()),0===e&&(clearInterval(o),t())}),1e3)})),new n(e,(()=>{const e=t.player1,n=t.player2;t.winner=e,e.wins++,n.losses++;const o=this.matches.filter((t=>t.round===this.currentRound));if(o.every((t=>t.winner))){this.currentRound++;const t=o.map((t=>t.winner));for(let e=0;e<t.length;e+=2)t[e+1]&&this.matches.push({player1:t[e],player2:t[e+1],round:this.currentRound})}this.currentMatch++,this.currentMatch===this.matches.length?this.showTournamentResults():this.showTournamentBracket()}))}showTournamentResults(){const t=this.players.reduce(((t,e)=>t.wins>e.wins?t:e));this.container.innerHTML=`\n            <div class="tournament-results">\n                <h2>TOURNAMENT COMPLETE!</h2>\n                <div class="winner-announcement">\n                    <h3>Winner: ${t.name}</h3>\n                    <p>Wins: ${t.wins} | Losses: ${t.losses}</p>\n                </div>\n                <div class="player-standings">\n                    <h3>Final Standings</h3>\n                    <div class="standings-list">\n                        ${this.players.sort(((t,e)=>e.wins-t.wins)).map(((t,e)=>`\n                                <div class="standing-item">\n                                    <span class="position">${e+1}</span>\n                                    <span class="name">${t.name}</span>\n                                    <span class="record">W: ${t.wins} | L: ${t.losses}</span>\n                                </div>\n                            `)).join("")}\n                    </div>\n                </div>\n                <button id="returnToMenu" class="tournament-button">RETURN TO MENU</button>\n            </div>\n        `;const e=document.getElementById("returnToMenu");e&&e.addEventListener("click",(()=>{this.router.navigate("/")}))}}class h{container;router;constructor(e){this.container=e,this.router=new t,this.setupRoutes(),this.setupNotFound(),this.showInitialScreen()}setupRoutes(){this.router.addRoute("/",(()=>{console.log("Rendering root route"),this.container.innerHTML="";new e(this.container,this.router).render()})),this.router.addRoute("/menu",(()=>{console.log("Rendering menu route"),this.container.innerHTML="";new e(this.container,this.router).render()})),this.router.addRoute("/login",(()=>{console.log("Rendering login route"),this.container.innerHTML="",new l(this.container,this.router)})),this.router.addRoute("/register",(()=>{console.log("Rendering register route"),this.container.innerHTML="",new c(this.container,this.router)})),this.router.addRoute("/game/local",(()=>(console.log("Rendering local game route"),this.container.innerHTML="",this.startLocalGame()))),this.router.addRoute("/game/local-tournament",(()=>{console.log("Rendering local tournament route"),this.container.innerHTML="",new u(this.container,this.router)})),this.router.addRoute("/game/online",(()=>(console.log("Rendering online game route"),this.container.innerHTML="",this.startOnlineGame())),{requiresAuth:!0}),this.router.addRoute("/tournament",(()=>(console.log("Rendering tournament route"),this.container.innerHTML="",this.startTournament())),{requiresAuth:!0}),this.router.addRoute("/settings",(()=>{console.log("Rendering settings route"),this.container.innerHTML="",new d(this.container,this.router)}),{requiresAuth:!0})}setupNotFound(){this.router.setNotFoundHandler((()=>{this.container.innerHTML="",new r(this.container,this.router)}))}async startLocalGame(){return new Promise((t=>{new n(this.container,(()=>{this.router.navigate("/"),t()}))}))}async startOnlineGame(){return this.container.innerHTML='\n            <div class="coming-soon">\n                <h2>Online Mode Coming Soon!</h2>\n                <p>Challenge players from around the world.</p>\n                <button class="menu-button" onclick="window.history.back()">Go Back</button>\n            </div>\n        ',Promise.resolve()}async startTournament(){return this.container.innerHTML='\n            <div class="coming-soon">\n                <h2>Tournament Mode Coming Soon!</h2>\n                <p>Compete in tournaments and climb the global rankings.</p>\n                <button class="menu-button" onclick="window.history.back()">Go Back</button>\n            </div>\n        ',Promise.resolve()}showInitialScreen(){const t=window.location.pathname;"/"===t?new e(this.container,this.router):this.router.navigate(t)}}document.addEventListener("DOMContentLoaded",(()=>{const t=document.getElementById("root");t?new h(t):console.error("Root element not found")}));
//# sourceMappingURL=index-Bzvrwu_G.js.map
